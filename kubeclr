#!/usr/bin/env bash
#
# kubeclr(1) is a utility to switch between Kubernetes clusters.

# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

KUBECLR_DIR="${HOME}/.kube/kubeclr"

usage() {
  cat <<"EOF"
USAGE:
  kubeclr                    : list the clusters
  kubeclr <NAME>             : change the cluster of current context
  kubeclr -                  : switch to the previous cluster in this context
  kubeclr -h,--help          : show this message
EOF
  exit 1
}

current_cluster() {
  local cur_ctx
  cur_ctx="$(current_context)"
  cluster="$(kubectl config view -o=jsonpath="{.contexts[?(@.name==\"${cur_ctx}\")].context.cluster}")"
  if [[ -z "${cluster}" ]]; then
    echo "default"
  else
    echo "${cluster}"
  fi
}

current_context() {
  kubectl config view -o=jsonpath='{.current-context}'
}

get_clusters() {
  kubectl config get-clusters | tail -n +2 | sort -n
}

escape_cluster_name() {
  echo "${1//\//-}"
}

cluster_file() {
  local ctx="$(escape_cluster_name "${1}")"
  echo "${KUBECLR_DIR}/${ctx}"
}

read_cluster() {
  local f
  f="$(cluster_file "${1}")"
  [[ -f "${f}" ]] && cat "${f}"
  return 0
}

save_cluster() {
  mkdir -p "${KUBECLR_DIR}"
  local f saved
  f="$(cluster_file "${1}")"
  saved="$(read_cluster "${1}")"

  if [[ "${saved}" != "${2}" ]]; then
    printf %s "${2}" > "${f}"
  fi
}

switch_cluster() {
  local ctx="${1}"
  kubectl config set-context "${ctx}" --cluster="${2}"
  echo "Active cluster is \"${2}\".">&2
}

set_cluster() {
  local ctx prev
  ctx="$(current_context)"
  prev="$(current_cluster)"

  if grep -q ^"${1}"\$ <(get_clusters); then
    switch_cluster "${ctx}" "${1}"

    if [[ "${prev}" != "${1}" ]]; then
      save_cluster "${ctx}" "${prev}"
    fi
  else
    echo "error: no cluster exists with name \"${1}\".">&2
    exit 1
  fi
}

list_clusters() {
  set -u pipefail
  local cur
  cur="$(current_cluster)"

  local yellow darkbg normal
  yellow=$(tput setaf 3)
  darkbg=$(tput setab 0)
  normal=$(tput sgr0)

  for c in $(get_clusters); do
  if [[ -t 1 && "${c}" = "${cur}" ]]; then
    echo "${darkbg}${yellow}${c}${normal}"
  else
    echo "${c}"
  fi
  done
}

swap_cluster() {
  local ctx cluster
  ctx="$(current_context)"
  cluster="$(read_cluster "${ctx}")"
  if [[ -z "${cluster}" ]]; then
    echo "error: No previous cluster found for current context." >&2
    exit 1
  fi
  set_cluster "${cluster}"
}

main() {
  if [[ "$#" -eq 0 ]]; then
    list_clusters
  elif [[ "$#" -eq 1 ]]; then
    if [[ "${1}" == '-h' || "${1}" == '--help' ]]; then
      usage
    elif [[ "${1}" == "-" ]]; then
      swap_cluster
    elif [[ "${1}" =~ ^-(.*) ]]; then
      echo "error: unrecognized flag \"${1}\"" >&2
      usage
    else
      set_cluster "${1}"
    fi
  else
    echo "error: too many flags" >&2
    usage
  fi
}

main "$@"
